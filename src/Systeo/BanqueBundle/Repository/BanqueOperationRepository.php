<?php

namespace Systeo\BanqueBundle\Repository;
use Doctrine\ORM\QueryBuilder;

/**
 * BanqueOperationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BanqueOperationRepository extends \Doctrine\ORM\EntityRepository
{
    public function MyFindAll($data,$is_solde=false)
   {
       $queryBuilder = $this->createQueryBuilder('a');
       
       $this->searchName($queryBuilder,$data);
       $this->searchCompte($queryBuilder,$data);
       $this->searchCredit($queryBuilder, $data);
       $this->searchDebit($queryBuilder, $data);
       $this->searchSoldeDebit($queryBuilder, $data);
       $this->searchSoldeCredit($queryBuilder, $data);
       $this->searchDate($queryBuilder, $data);
       $this->searchDateValeur($queryBuilder, $data);
      
       $queryBuilder->orderBy('a.date','DESC');
       
       if($is_solde){
           return $queryBuilder->getQuery()->execute();
       }
       
       return $queryBuilder;
   }
   
   public function getSumOperations($data){
       $querySum = $this->createQueryBuilder('a');
       
       $querySum->select('SUM(a.soldeReglementCredit) as soldeCredit,  SUM(a.soldeReglementDebit) as soldeDebit, SUM(a.debit) as totalDebit,  SUM(a.credit) as totalCredit');
       
       $this->searchName($querySum,$data);
       $this->searchCompte($querySum,$data);
       $this->searchCredit($querySum, $data);
       $this->searchDebit($querySum, $data);
       $this->searchSoldeDebit($querySum, $data);
       $this->searchSoldeCredit($querySum, $data);
       $this->searchDate($querySum, $data);
       $this->searchDateValeur($querySum, $data);
       
       $result = $querySum->getQuery()->execute();
       
       return $result[0];
   }
   
   /**
    * 
    * @param type $name
    */
   private function searchName(QueryBuilder $qb, $data)
   {
       if(isset($data['name']) && !empty($data['name'])){
           $qb->andWhere('a.name like :name')
              ->setParameter('name', '%'.$data['name'].'%');
       }
   }
   
   /**
    * 
    * @param type $name
    */
   private function searchCompte(QueryBuilder $qb, $data)
   {
       if(isset($data['compte']) && !empty($data['compte'])){
           $qb->andWhere('a.banqueCompte = :compte')
              ->setParameter('compte', $data['compte']);
       }
   }
   
   
   /**
    * 
    * @param type $name
    */
   private function searchSoldeDebit(QueryBuilder $qb, $data)
   {
       if(isset($data['solde_debit']) && $data['solde_debit']!=="" && isset($data['solde_debit_comparateur']) && !empty($data['solde_debit_comparateur'])){
           $qb->andWhere('a.soldeReglementDebit '.$data['solde_debit_comparateur'].' :solde_debit')
              ->setParameter('solde_debit', $data['solde_debit']);
       }
   }
   
   /**
    * 
    * @param type $name
    */
   private function searchSoldeCredit(QueryBuilder $qb, $data)
   {
       if(isset($data['solde_credit']) && $data['solde_credit']!=="" && isset($data['solde_credit_comparateur']) && !empty($data['solde_credit_comparateur'])){
           $qb->andWhere('a.soldeReglementCredit '.$data['solde_credit_comparateur'].' :solde_credit')
              ->setParameter('solde_credit', $data['solde_credit']);
       }
   }
   
   /**
    * 
    * @param type $name
    */
   private function searchDebit(QueryBuilder $qb, $data)
   {
       if(isset($data['debit']) && $data['debit']!=="" && isset($data['debit_comparateur']) && !empty($data['debit_comparateur'])){
           $qb->andWhere('a.debit '.$data['debit_comparateur'].' :debit')
              ->setParameter('debit', $data['debit']);
       }
   }
   
   /**
    * 
    * @param type $name
    */
   private function searchCredit(QueryBuilder $qb, $data)
   {
       if(isset($data['credit']) && $data['credit']!=="" && isset($data['credit_comparateur']) && !empty($data['credit_comparateur'])){
           $qb->andWhere('a.credit '.$data['credit_comparateur'].' :credit')
              ->setParameter('credit', $data['credit']);
       }
   }
   
   private function searchDate(QueryBuilder $qb, $data) {

        $date_1 = false;
        $date_2 = false;

        if (isset($data['date_debut']) && !empty($data['date_debut'])) {
            $date_1 = true;
        }

        if (isset($data['date_fin']) && !empty($data['date_fin'])) {
            $date_2 = true;
        }

        if ($date_1 && !$date_2) {
            $qb->andWhere('a.date >= :date')
                    ->setParameter('date', $data['date_debut']);
        } elseif (!$date_1 && $date_2) {
            $qb->andWhere('a.date <= :date')
                    ->setParameter('date', $data['date_fin']);
        } elseif ($date_1 && $date_2) {
            $qb->andWhere('a.date BETWEEN :start AND :end')
                    ->setParameter('start', $data['date_debut'])
                    ->setParameter('end', $data['date_fin'])
            ;
        }
    }
    
    private function searchDateValeur(QueryBuilder $qb, $data) {

        $date_1 = false;
        $date_2 = false;

        if (isset($data['valeur_debut']) && !empty($data['valeur_debut'])) {
            $date_1 = true;
        }

        if (isset($data['valeur_fin']) && !empty($data['valeur_fin'])) {
            $date_2 = true;
        }

        if ($date_1 && !$date_2) {
            $qb->andWhere('a.dateValeur >= :date')
                    ->setParameter('date', $data['valeur_debut']);
        } elseif (!$date_1 && $date_2) {
            $qb->andWhere('a.dateValeur <= :date')
                    ->setParameter('date', $data['valeur_fin']);
        } elseif ($date_1 && $date_2) {
            $qb->andWhere('a.dateValeur BETWEEN :start AND :end')
                    ->setParameter('start', $data['valeur_debut'])
                    ->setParameter('end', $data['valeur_fin'])
            ;
        }
    }
}
