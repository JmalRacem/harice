<?php

namespace Systeo\FileBundle\Repository;

use Doctrine\ORM\QueryBuilder;
use Systeo\UserBundle\Entity\User;
/**
 * FileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FileRepository extends \Doctrine\ORM\EntityRepository
{
     public function MyFindAll($data, User $user)
   {
       $queryBuilder = $this->createQueryBuilder('a');
       
       
       $queryBuilder->orderBy('a.id','DESC');
       
       $this->searchName($queryBuilder,$data);
       $this->searchCategory($queryBuilder,$data);
       
       $query = $queryBuilder->getQuery();
       $results = $query->getResult();
       
       return $results;
   }
   
   
   /**
    * 
    * @param ARRAY $categs
    */
   public function findByCateg($categs){
       $queryBuilder = $this->createQueryBuilder('a')
               ->leftJoin('a.filecategories', 'filecategory')
                ->addSelect('filecategory')
                ->where('filecategory.id IN (:id)')
                ->setParameter('id', $categs);
       
       $query = $queryBuilder->getQuery();
       $results = $query->getResult();
       
       return $results;
   }
   
   /**
    * 
    * @param type $name
    */
   private function searchName(QueryBuilder $qb, $data)
   {
       if(isset($data['search']) && !empty($data['search'])){
           $qb->andWhere('a.name like :search ')
              ->setParameter('search', '%'.$data['search'].'%');
       }
   }
   
   private function searchCategory(QueryBuilder $qb, $data)
   {
       if(isset($data['category']) && $data['category']!=''){
           
       }
   }
    
    public function SearchByEntity($entity = null, $entity_id = null) {

        $queryBuilder = $this->createQueryBuilder('a');
        
        if (isset($entity) && !empty($entity)) {
             $queryBuilder->andWhere('a.entity = :entity')
                ->setParameter('entity', $entity);
        }
       

        if (isset($entity_id) && !empty($entity_id)) {
            $queryBuilder->andWhere('a.entityId = :entity_id')
                    ->setParameter('entity_id', $entity_id);
        }

        $query = $queryBuilder->getQuery();
        $results = $query->getResult();

        return $results;
    }

}
